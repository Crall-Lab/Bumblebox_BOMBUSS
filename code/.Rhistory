#Load packages
library(ggplot2)
library(png)
library(lubridate)
library(stringr)
library(grid)
library(lme4)
library(lmerTest)
library(gridExtra)
#Define parent directory containing data you want to analyze
#This example uses the zipped data available at:
#REFREF
pdir <- '/Users/jamescrall/Downloads/2023-10-28'
#Define image dimensions for plotting
xl <- 4056
yl <- 3040
#Load contact data
rm('contact_data')
for(file in trials){
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
## Compile average data
#Check to see if output data frame exists
if(!exists('contact_data')){
contact_data <- data #If not, create it from the first loop
} else {
contact_data <- rbind(contact_data, data) #Otherwise append new data to the end
}
}
#Load packages
library(ggplot2)
library(png)
library(lubridate)
library(stringr)
library(grid)
library(lme4)
library(lmerTest)
library(gridExtra)
#Define parent directory containing data you want to analyze
#This example uses the zipped data available at:
#REFREF
pdir <- '/Users/jamescrall/Downloads/2023-10-28'
#Define image dimensions for plotting
xl <- 4056
yl <- 3040
#Get list of unique trials (using recursive search in case there are subfolders)
trials <- list.files(pdir, pattern = '*averages.csv', full.names = TRUE, recursive = TRUE)
#Select a random trial - trial 10 in this list
i <- 10
#Load background photo
background_im <- readPNG(str_replace(trials[i], '_averages.csv', '.png'))
#Clip image excess
background_im <- background_im[1:3040,]
#Optional: plot image
#image(background_im, col = gray.colors(33))
#tracking data
tracking_data <- read.csv(str_replace(trials[i], '_averages.csv', '_updated.csv'))
tracking_data$ID <- as.factor(tracking_data$ID)
ggplot(tracking_data, aes(x = centroidX, y = centroidY, colour = ID)) + geom_point()+xlim(c(0,xl)) + ylim(c(0,yl))
#average data
summary_data <- read.csv(trials[i])
summary_data
#Make sure you don't have a 'comb_data' object in memory
rm('tracking_data')
for(file in trials){
data <- read.csv(str_replace(file, '_averages.csv', '_updated.csv'))
## Compile average data
#Check to see if output data frame exists
if(!exists('tracking_data')){
tracking_data <- data #If not, create it from the first loop
} else {
tracking_data <- rbind(tracking_data, data) #Otherwise append new data to the end
}
}
tracking_data$ID <- as.factor(tracking_data$ID)
ggplot(tracking_data, aes(x = centroidX, y = centroidY, colour = ID)) + geom_point(alpha = 0.3, cex = 0.4)+xlim(c(0,xl)) + ylim(c(0,yl))
#Make sure you don't have a 'comb_data' object in memory
rm('comb_data')
for(file in trials){
data <- read.csv(file)
## Compile average data
#Check to see if output data frame exists
if(!exists('comb_data')){
comb_data <- data #If not, create it from the first loop
} else {
comb_data <- rbind(comb_data, data) #Otherwise append new data to the end
}
}
comb_data$ID <- as.factor(comb_data$ID)
#Clean out missing data
comb_data <- comb_data[complete.cases(comb_data),]
#Boxplot of speed vs. individual
ggplot(comb_data, aes(x = reorder(ID, average.speed, FUN = median), y = log10(average.speed)))+geom_boxplot()
#Check for evidence of individual variation
model <- lmer(log10(1+average.speed)~ID + (1|filename), data = comb_data)
model.1 <- lmer(log10(1+average.speed)~1 + (1|filename), data = comb_data)
anova(model, model.1)
#Show distance from center by individual
ggplot(comb_data, aes(x = reorder(ID, average.distance.from.center, FUN = median), y = average.distance.from.center))+geom_boxplot()
#Get individual averages
individual_averages <- aggregate(cbind(average.distance.from.center, average.speed, frames.tracked.in.video)~ID, data = comb_data, FUN = median)
colnames(individual_averages) <- c('ID', 'dist', 'speed', 'frames_tracked')
# Remove outlier with zero velocity
individual_averages <- subset(individual_averages, speed > 1)
#Plot histogram of framewise speeds to determine threshold for 'real' movement
hist(log10(tracking_data$speed), breaks = 30)
#Looks like ~3.1 pixels/frame (log10(3.1)~= 0.5)
speed_thresh <- 3.1
tracking_data$moving[tracking_data$speed > speed_thresh] <- 1
tracking_data$moving[tracking_data$speed < speed_thresh] <- 0
#Visualize individual speed/distance over time
#Set up timestamps
start.date <- parse_date_time('2023-10-28 00:00:00', "%Y-%m-%d %H:%M:%S")
comb_data$datetime <- parse_date_time(substr(comb_data$filename, 14, 32), "%Y-%m-%d_%H-%M-%S")
comb_data$time.num <- as.numeric(difftime(comb_data$datetime, start.date, units = 'days'))
comb_data <- comb_data[order(comb_data$ID, comb_data$time.num),]
p1 <- ggplot(comb_data, aes(x = time.num, y = average.speed, colour = ID)) + geom_point(alpha = 0.3, cex = 0.4)+geom_line(alpha = 0.3)
p2 <- ggplot(comb_data, aes(x = reorder(ID, average.speed, FUN = median), y = average.speed, colour = ID))+geom_boxplot()
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(comb_data, aes(x = time.num, y = average.distance.from.center, colour = ID)) + geom_point(alpha = 0.3, cex = 0.4)+geom_line(alpha = 0.3)
p2 <- ggplot(comb_data, aes(x = reorder(ID, average.distance.from.center, FUN = median), y = average.distance.from.center, colour = ID))+geom_boxplot()
grid.arrange(p1, p2, ncol=2)
#Get average time spent moving for each bee
aggregate(moving~ID, data = tracking_data, FUN = mean)
#Load contact data
rm('contact_data')
for(file in trials){
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
## Compile average data
#Check to see if output data frame exists
if(!exists('contact_data')){
contact_data <- data #If not, create it from the first loop
} else {
contact_data <- rbind(contact_data, data) #Otherwise append new data to the end
}
}
head(data)
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
i
head(data)
file
trials
trials[1]
file
file <- trials[1]
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
data
names(data)
gsub("X", "", names(data))
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
#Get rid of 'X' in filenames
names(data) <- gsub("X", "", names(data))
data2 <- read.csv(str_replace(trials[10], '_averages.csv', '_contacts.csv'))
head(data2)
head(data)
names(data2) <- gsub("X", "", names(data2))
head(data2)
names(data) %in% names(data2)
names(data2) %in% names(data)
unique(tracking_data$ID)
table(tracking_data$ID)
seq(1,15)
head(data)
out_data <- data.frame(ncols = 16, nrow = 0)
names(out_data) <- c('ID', as.character(seq(1,15)))
as.character(seq(1,15))
c('ID', as.character(seq(1,15)))
names(out_data) <- as.character(c('ID', as.character(seq(1,15))))
out_data <- data.frame(ncols = 16, nrow = 0)
names(out_data)
colnames(out_data) <- as.character(c('ID', as.character(seq(1,15))))
out_data <- data.frame(ncols = 16, nrow = 0)
colnames(out_data) <- as.character(c('ID', as.character(seq(1,15))))
colnames(out_data
)
out_data <- data.frame(ncol = 16, nrow = 0)
head(out_data)
out_data <- as.data.frame(matrix(ncol = 16, nrow = 0))
head(out_data)
colnames(out_data) <- as.character(c('ID', as.character(seq(1,15))))
head(out_data)
data
data.columns
data[colnames(out_data)]
match(colnames(data), colnames(out_data))
colnames(data)
head(out_data
)
out_data <- as.data.frame(matrix(ncol = 17, nrow = 0))
colnames(out_data) <- as.character(c('ID', as.character(seq(0,15))))
match(colnames(data), colnames(out_data))
colnames(data)
data[,match(colnames(data), colnames(out_data))]
data[,match(colnames(data), colnames(out_data))]
ind <- match(colnames(data), colnames(out_data))
ind
data <- data[,colnames(data) %in% colnames(out_data)]
data
haed(data)
head(data)
data[,match(colnames(data), colnames(out_data))]
match(colnames(data), colnames(out_data))
match(colnames(data), colnames(out_data)) -> ind
ind
data[,ind]
ind
which(ind)
data[,colnames(out_data)]
data[colnames(out_data)]
?pmatch
colnames(out_data) %in% colnames(data)
colnames(data) %in% colnames(out_data)
head(data)
head(out_data)
match(colnames(out_data), colnames(data))
match(colnames(data), colnames(out_data))
colnames(data)
?match
match(colnames(data), colnames(out_data))
empty_data <- as.data.frame(matrix(ncol = 17, nrow = length(data[,1])))
empty_data
dim(data)
match(colnames(data), colnames(out_data))
colnames(empty_data) <- colnames(out_data)
empty_data[,match(colnames(data), colnames(out_data))] <- data
head(empty_data)
head(data)
#Load contact data
rm('contact_data')
out_data <- as.data.frame(matrix(ncol = 17, nrow = 0))
colnames(out_data) <- as.character(c('ID', as.character(seq(0,15))))
for(file in trials){
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
#Get rid of 'X' in filenames
names(data) <- gsub("X", "", names(data))
#Remove columns that aren't in output data
data <- data[,colnames(data) %in% colnames(out_data)]
empty_data <- as.data.frame(matrix(ncol = 17, nrow = length(data[,1])))
colnames(empty_data) <- colnames(out_data)
empty_data[,match(colnames(data), colnames(out_data))] <- data
out_data <- rbind(out_data, empty_data)
}
head(out_data)
dim(out_data)
?aggregate
aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean)
aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
interactions <- aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
#Remove data from errant tags
interactions <- interactions[1:16,]
library(igraph)
#Load packages
library(ggplot2)
library(png)
library(lubridate)
library(stringr)
library(grid)
library(lme4)
library(lmerTest)
library(gridExtra)
library(igraph)
#Define parent directory containing data you want to analyze
#This example uses the zipped data available at:
#REFREF
pdir <- '/Users/jamescrall/Downloads/2023-10-28'
#Define image dimensions for plotting
xl <- 4056
yl <- 3040
gr <- layout.fruchterman.reingold(interactions)
bamnet
graph.data.frame(interactions)
gr <- graph.data.frame(interactions)
E(gr)
V(gr)
plot(gr)
gr <- graph.data.frame(interactions*100)
gr <- layout.fruchterman.reingold(gr)
plot(gr)
interactions
dim(interactions)
diag(interactions) <- 0
interactions
diag(interactions)
class9(interactions)
class(interactions)
gr <- graph.data.frame(as.matrix(interactions*100))
as.matrix(interactions*100)
interactions <- s.matrix(interactions*100)
interactions <- as.matrix(interactions*100)
class(interactions)
diag(interactions)
interacionts[interactions == NaN] <- 0
interactions[interactions == NaN] <- 0
interactions[interactions == 100] <- 0
interactions <- aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
#Remove data from errant tags
interactions <- interactions[1:16,]
interactions <- as.matrix(interactions*100)
interactions[interactions == NaN] <- 0
interactions[interactions == 100] <- 0
interactions
interactions[is.na(interactions)] <- 0
interactions
gr <- graph.data.frame(interactions)
gr <- layout.fruchterman.reingold(gr)
plot(gr)
gr
graph.adjacency(interactinos, mode = 'undirected', weighted=TRUE, diag=FALSE)
graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
plot(net)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 8)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 8)
interactions <- aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
#Remove data from errant tags
interactions <- interactions[1:16,]
#interactions <- as.matrix(interactions*100)
interactions[is.na(interactions)] <- 0
interactions[interactions == 100] <- 0
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
interactions <- aggregate(out_data[,2:16], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
#Remove data from errant tags
interactions <- interactions[1:16,]
interactions <- as.matrix(interactions)
interactions[is.na(interactions)] <- 0
interactions[interactions == 100] <- 0
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 8)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 20)
interactions
dim(interactions)
interactions <- aggregate(out_data[,2:17], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
interactions
#Remove data from errant tags
interactions <- interactions[1:16,2:17]
dim(interactions)
interactions <- as.matrix(interactions)
interactions[is.na(interactions)] <- 0
interactions[interactions == 100] <- 0
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 20)
interactions
interactions[interactions == 1] <- 0
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight, vertex.size = 20)
plot(net)
plot(net, layout=layout.fruchterman.reingold)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight*100)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight*10)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight*30)
plot(net, layout=layout.fruchterman.reingold, edge.width=E(net)$weight*50)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight*50, vertex.size = 20)
#Load contact data
rm('contact_data')
out_data <- as.data.frame(matrix(ncol = 17, nrow = 0))
colnames(out_data) <- as.character(c('ID', as.character(seq(0,15))))
for(file in trials){
data <- read.csv(str_replace(file, '_averages.csv', '_contacts.csv'))
#Get rid of 'X' in filenames
names(data) <- gsub("X", "", names(data))
#Remove columns that aren't in output data
data <- data[,colnames(data) %in% colnames(out_data)]
empty_data <- as.data.frame(matrix(ncol = 17, nrow = length(data[,1])))
colnames(empty_data) <- colnames(out_data)
empty_data[,match(colnames(data), colnames(out_data))] <- data
out_data <- rbind(out_data, empty_data)
}
interactions <- aggregate(out_data[,2:17], by = list(out_data$ID), FUN = mean, na.rm = TRUE)
#Remove data from errant tags
interactions <- interactions[1:16,2:17]
interactions <- as.matrix(interactions)
interactions[is.na(interactions)] <- 0
interactions[interactions == 1] <- 0
net <- graph.adjacency(interactions, mode = 'undirected', weighted=TRUE, diag=FALSE)
plot.igraph(net,layout=layout.fruchterman.reingold, edge.width=E(net)$weight*50, vertex.size = 20)
#Get list of unique trials (using recursive search in case there are subfolders)
trials <- list.files(pdir, pattern = '*averages.csv', full.names = TRUE, recursive = TRUE)
#Select a random trial - trial 10 in this list
i <- 10
#Load background photo
background_im <- readPNG(str_replace(trials[i], '_averages.csv', '.png'))
#Clip image excess
background_im <- background_im[1:3040,]
#Optional: plot image (this can be slow)
image(background_im, col = gray.colors(33))
#tracking data
tracking_data <- read.csv(str_replace(trials[i], '_averages.csv', '_updated.csv'))
tracking_data$ID <- as.factor(tracking_data$ID)
ggplot(tracking_data, aes(x = centroidX, y = centroidY, colour = ID)) + geom_point()+xlim(c(0,xl)) + ylim(c(0,yl))
